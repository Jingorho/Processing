/*
 * Processing Sample Project for Moritalab in 2018
 * 2018.04.26
 *
 * ############### MISSION ################
 * - Lv.1: ランダムに生成された数値と演算子から，答えを計算する処理を追加してみる（119行目あたり~）．
 * - Lv.2: 水色のパネルをクリックしたときに，ユーザが該当の演算子を選択したことになるようにしてみる（80行目あたり~）．
 * - Lv.3: 今持ってる知識でこのクソゲーをもっと面白くしてみる（ヒント：タイマー，正解時に音が鳴る，...など）．
 */
 

///////////////////////////////////////////////
// このプログラム全体で使用する変数を宣言する部分
///////////////////////////////////////////////
int queX, queY, ans; //問題と答えの数値をランダムに入れるための変数
String operator;     //演算子をランダムに入れるための変数
String userOperator; //ユーザがクリックによって選ぶ演算子を入れるための変数

int quest; //問題数をカウントするための変数
int score; //正解数をカウントするための変数

String[] oprArray = {"+", "-", "×", "÷"}; //問題文用の演算子をセットするおまじない
boolean mouseClicked = false;             //マウスのクリックを取得するおまじない


///////////////////////////////////////////////
// SETUP : このプログラムの設定を書く部分
///////////////////////////////////////////////
void setup() {
  
  //アプリケーションの画面の設定
  size(400, 400);    //画面の大きさを400px*400pxに設定
  background(255);   //画面の背景を白色に設定
  textSize(40);      //フォントの大きさを40ptに設定
  textAlign(CENTER); //文字列をセンタリング
  
  //問題の初期値をテキトーに設定
  queX = 10;
  queY = 20;
  ans = 30;
  operator = "";
  userOperator = "";
  quest = 0;
  score = 0;
  
  
}//setup()終わり


///////////////////////////////////////////////
// DRAW : このプログラムでの具体的な処理を書く部分
///////////////////////////////////////////////
void draw() {
  
  //画面下のボタン的なものを4つ描画
  for(int i=0; i<4; i++){
    fill(i*100, 255, 255);      //水色っぽい色に設定．繰り返しごとに色を少し変える．
    rect(100*i, 300, 100, 100); //描画開始位置のx座標だけ繰り返しごとに変えて，横にずらす処理
  }
  fill(0);                               //描画色を黒色に設定．
  text("+     -     ×     ÷", 200, 350); //ボタン的なものの名前をテキトーな位置に配置．
  
  //if マウスがクリックされたら
  if(mouseClicked == true){
    
    //if クリック位置が下の方(y座標として300~400)だったら
    if(300 < mouseY && mouseY < 400){
      
      
      /*** 前のdraw()で描かれたものをリセットする処理 ***/
      
      fill(255);                 //描画色を白色に設定．
      rect(0, 0, width, height); //画面全体に四角を描画
      
      
      
      /*** クリック位置でユーザの選択した演算子を決める処理 ***/
      
      //条件「mouseのx座標が100より小さい位置(左)だったら」
      if(mouseX < 100){
        userOperator = "+";
        
      //mouseのx座標が100以上で, 200以下の位置(真ん中左)だったら
      }else if(100 <= mouseX && mouseX <= 200){
        userOperator = "-";
        
      //mouseのx座標が200以上で, 300以下の位置(真ん中右)だったら
      }else if(100 <= mouseX && mouseX <= 300){
        userOperator = "×";
        
      //mouseのx座標がそれ以外(=必然的に"400より大きい")(右)だったら
      }else{
        userOperator = "÷";
        
      }//条件「mouseのx座標が~だったら」のif文終わり
      
      
      
      /*** ユーザの選択した演算子が正しいかどうかの判定処理 ***/
      
      //if ユーザの演算子が，ランダムに生成された演算子と一致していれば
      //（equals()は文字列が一致しているかどうかを調べる処理）
      if(userOperator.equals(operator)){
        score = score + 1; //正解数を1増やす（score++;とも書ける）
        println("正解!!!");
      }else{
        println("不正解~~~");
      }
      //正解しててもしてなくても問題数は1増やす
      quest = quest + 1;
      
      
      /* 問題を更新する処理　*/
      
      queX = int(random(0, 9)); //0~9までの整数からランダムに数値を生成する
      queY = int(random(0, 9)); //0~9までの整数からランダムに数値を生成する
      operator = oprArray[int(random(0, 3))]; //ランダムに演算子を生成するおまじない
      
      //ランダムに生成された数値と演算子から，答えを計算する
      if(operator.equals("+")){
        ans = queX + queY;
      }else if(operator.equals("-")){
        ans = queX - queY;
      }else if(operator.equals("×")){
        ans = queX * queY;
      }else{
        ans = queX / queY;
      }
      
      
      
      /* 問題と正解数などを画面に表示する処理　*/
      
      fill(0); //描画色を黒色に設定．
      
      //問題を表示する．
      //例:      3                +                  4        =         7
      text(str(queX) + "  " + operator + "  " + str(queY) + " = " + str(ans), 200, 150); //位置はテキトー
      //str()は，数値を文字列に変換する命令．
      //text()は，text("文字列", 表示したいx座標, 表示したいy座標);て感じで使う．
      
      rect(130, 120, 40, 40);                //演算子を隠す黒い四角を描画．位置はテキトー
      text(score + " / " + quest, 200, 270); //正解数 / 問題数 を表示する．
      
      
    }//mouseXのif文終わり
    
    //1回クリックしたら次の処理まで，問題更新処理などをやめる．ダブルクリックとか誤動作で2回更新されるのを防ぐため．
    mouseClicked = false; 
    
  }//mouseClickedのif文終わり
  
  
}//draw()終わり




///////////////////////////////////////////////
// MOUSECLICKED : マウスが「押されて，離された瞬間に」発動する関数．
//                (mousePressedは，「マウスが押されてる間ずっと」)
///////////////////////////////////////////////
void mouseClicked(){
  mouseClicked = true;
}//mouseClicked()終わり
